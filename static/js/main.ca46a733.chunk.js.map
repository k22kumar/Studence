{"version":3,"sources":["components/Login.js","components/Ad.js","components/AdBoard.js","components/Account.js","components/Navigation.js","components/PostAd.js","components/firebase.js","components/FullAd.js","components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","useState","signInUsername","setSignInUsername","signInPassword","setSignInPassword","registerUsername","setRegisterUsername","registerPassword","setRegisterPassword","updateText","e","specificState","target","value","action","htmlFor","type","id","onChange","onClick","logUserIn","registerUser","Ad","to","ad","getSelectedAd","src","picture","alt","title","price","AdBoard","ads","map","index","key","Account","myAds","filter","username","currUser","isLoggedIn","Navigation","exact","PostAd","setTitle","setPrice","searchPic","setSearchPic","setPicture","description","setDescription","photoResults","setPhotoResults","required","preventDefault","axios","url","method","responseType","headers","Authorization","params","query","total_results","then","response","data","photos","searchPicture","photo","className","small","original","postAd","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FullAd","selectedAd","addToCart","Cart","cartTotal","setCartTotal","madePurchase","setMadePurchase","useEffect","newTotal","cart","reduce","accum","item","parseFloat","length","confirmPurchase","App","setAds","setIsLoggedIn","setCurrUser","setSelectedAd","setCart","database","ref","on","snapshot","val","itemsForSale","updatedAds","push","password","once","users","console","log","usernameTaken","toUpperCase","newAd","Object","keys","adObject","newCart","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca46a733.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nconst Login = (props) => {\r\n\r\n    // set usernames and password to empty strings\r\n    const [signInUsername, setSignInUsername] = useState(\"\");\r\n    const [signInPassword, setSignInPassword] = useState(\"\");\r\n    const [registerUsername, setRegisterUsername] = useState(\"\");\r\n    const [registerPassword, setRegisterPassword] = useState(\"\");\r\n\r\n    const updateText = (e, specificState) => {\r\n        if (specificState === \"signInUsername\"){\r\n            setSignInUsername(e.target.value);\r\n        } else if (specificState === \"signInPassword\") {\r\n            setSignInPassword(e.target.value);\r\n        } else if (specificState === \"registerUsername\") {\r\n            setRegisterUsername(e.target.value);\r\n        } else if (specificState === \"registerPassword\") {\r\n            setRegisterPassword(e.target.value);\r\n        } else {}\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            <li>\r\n                <h2>Sign In</h2>\r\n                <form action=\"\">\r\n                    <label htmlFor=\"username\">Username</label>\r\n                    <input type=\"text\" id=\"username\" onChange={(e) => { updateText(e, \"signInUsername\")}}/>\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input type=\"text\" id=\"password\" onChange={(e) => { updateText(e, \"signInPassword\")}}/>\r\n                </form>\r\n                    <button onClick={() => props.logUserIn(signInUsername, signInPassword)}>Sign In</button>\r\n            </li>\r\n            <li>\r\n                <h2>Register</h2>\r\n                <form action=\"\">\r\n                    <label htmlFor=\"newUsername\">Username</label>\r\n                    <input type=\"text\" id=\"newUsername\" onChange={(e) => {updateText(e, \"registerUsername\")}}/>\r\n                    <label htmlFor=\"newPassword\">Password</label>\r\n                    <input type=\"text\" id=\"newPassword\" onChange={(e) => { updateText(e, \"registerPassword\")}}/>\r\n                    <button onClick={(e) => props.registerUser(registerUsername, registerPassword, e)}>Register</button>\r\n                </form>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nconst Ad = (props) => {\r\n    return (\r\n        <Link to={`/fullAd/${props.ad.id}`} onClick={() => props.getSelectedAd(props.ad)}>\r\n            <div>\r\n                <img src={props.ad.picture} alt=\"\"/>\r\n            </div>\r\n            <div>\r\n                <h3>Title: {props.ad.title}</h3>\r\n                <p>Price: ${props.ad.price}</p>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Ad;","import React from 'react';\r\nimport Ad from './Ad';\r\n\r\nconst AdBoard = (props) => {\r\n    return (\r\n        <div>\r\n            {\r\n                props.ads.map((ad, index) => {\r\n                    return <Ad key={index} ad={ad} getSelectedAd={props.getSelectedAd}/>;\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdBoard;","import React from 'react';\r\nimport Login from './Login';\r\nimport AdBoard from './AdBoard';\r\n\r\nconst Account = (props) => {\r\n    let myAds = props.ads;\r\n    myAds = myAds.filter((ad) => { return ad.username === props.currUser });\r\n    return (\r\n        <div>\r\n            {/* IF LOGGEDIN where users can see their ads/acount info and edit them*/}\r\n            {/* IF NOT LOGGEDIN show sign up stuff*/}\r\n            {!props.isLoggedIn && <Login logUserIn={props.logUserIn} registerUser={props.registerUser}/>}\r\n            {props.isLoggedIn && <div>\r\n                    <h3>Your Ads</h3>\r\n                    <AdBoard getSelectedAd={props.getSelectedAd} ads={myAds}/>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account;","import React, {useState, useEffect} from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport Account from './Account';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav>\r\n            <Link exact to=\"/\"><h1>Studence</h1></Link>\r\n            <Link to=\"/postAd\">Post Ad</Link>\r\n            <Link to=\"/account\">Account</Link>\r\n            <Link to=\"/cart\">Cart</Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React, {useEffect, useState} from 'react';\r\nimport Login from './Login';\r\nimport axios from 'axios';\r\n\r\nconst PostAd = (props) => {\r\n    // set usernames and password to empty strings\r\n    const [title, setTitle] = useState(\"\");\r\n    const [price, setPrice] = useState(0);\r\n    const [searchPic, setSearchPic] = useState(\"\");\r\n    const [picture, setPicture] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [photoResults, setPhotoResults] = useState([]); \r\n\r\n    const updateText = (e, specificState) => {\r\n        if (specificState === \"title\") {\r\n            setTitle(e.target.value);\r\n        } else if (specificState === \"price\") {\r\n            setPrice(e.target.value);\r\n        } else if (specificState === \"searchPic\") {\r\n            setSearchPic(e.target.value);\r\n        } else if (specificState === \"description\") {\r\n            setDescription(e.target.value);\r\n        } else { }\r\n    }\r\n\r\n    const searchPicture = (e) => {\r\n        e.preventDefault();\r\n        axios({\r\n            url: 'https://api.pexels.com/v1/search',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            headers: {\r\n                Authorization: '563492ad6f917000010000016fbbfe29d1004ae7b7d31d9dab75aed7'\r\n            },\r\n            params: {\r\n                query: searchPic,\r\n                total_results: 10\r\n            }            \r\n        }).then((response) => {\r\n            setPhotoResults(response.data.photos);\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {!props.isLoggedIn && <Login logUserIn={props.logUserIn} registerUser={props.registerUser}/>}\r\n            {props.isLoggedIn && \r\n            <form action=\"\" >\r\n                <label htmlFor=\"title\">Title</label>\r\n                <input required type=\"text\" id=\"title\" onChange={(e) => { updateText(e, \"title\")}}/>\r\n                <label htmlFor=\"price\">Price</label>\r\n                <input required type=\"text\" id=\"price\" onChange={(e) => { updateText(e, \"price\")}}/>\r\n                <label htmlFor=\"searchPic\">Search for Picture</label>\r\n                <input type=\"text\" id=\"searchPic\" onChange={(e) => { updateText(e, \"searchPic\")}}/>\r\n                <button onClick={(e)=> {searchPicture(e)}}>Search Picture</button>\r\n                <div>\r\n                    {photoResults.map((photo, id) => {\r\n                        return <button key={id} className=\"picChoice\" onClick={() => { setPicture(photo.src.small)}} >\r\n                                    <img src={photo.src.original} alt=\"\"/>\r\n                                </button>\r\n                    })\r\n                    }\r\n                </div>\r\n                <label htmlFor=\"description\">Description</label>\r\n                <input required type=\"text\" id=\"description\" onChange={(e) => { updateText(e, \"description\")}}/>\r\n                <button onClick={(e) => {\r\n                    props.postAd(title, price, picture, description, e);\r\n                }} >Upload Ad</button>\r\n            </form>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostAd;","import firebase from 'firebase/app';\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCmJo2qZ6oG27sE46q7bTwshnyUAEJwTdg\",\r\n    authDomain: \"studence-61105.firebaseapp.com\",\r\n    databaseURL: \"https://studence-61105.firebaseio.com\",\r\n    projectId: \"studence-61105\",\r\n    storageBucket: \"studence-61105.appspot.com\",\r\n    messagingSenderId: \"625737292006\",\r\n    appId: \"1:625737292006:web:8dbc42e7b45e9abcb5c327\"\r\n}\r\n\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nconst FullAd = (props) => {\r\n    const {selectedAd} = props;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{selectedAd.title}</h2>\r\n            <img src={selectedAd.picture} alt=\"\"/>\r\n            <p>{selectedAd.price}</p>\r\n            <p>{selectedAd.description}</p>\r\n            <p>Sold by: {selectedAd.username}</p>\r\n            <div>\r\n                <button onClick={() => props.addToCart(selectedAd)}>Add to Cart</button>\r\n                <Link to={`/cart`} onClick={() => props.addToCart(selectedAd)}>Buy</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FullAd;","import React, {useState, useEffect} from 'react';\r\n\r\nconst Cart = (props) => {\r\n    const [cartTotal, setCartTotal] = useState(0);\r\n    const [madePurchase, setMadePurchase] = useState(false);\r\n    \r\n    useEffect( () => {\r\n        // update the shopping cart total\r\n        let newTotal = props.cart.reduce((accum, item) => {\r\n            return accum + parseFloat(item.price);\r\n        }, 0);\r\n        setCartTotal(newTotal);\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h2>CheckOut</h2>\r\n            {madePurchase && <p>Thank You!</p>}        \r\n            {props.cart.length === 0 && <p>No items in Cart!</p>}\r\n            {props.cart.length > 0 && <div>\r\n                <ul>\r\n                    {props.cart.map((item, index) => {\r\n                        return <li key={index}>\r\n                            <p>{item.title}</p>\r\n                            <p>{item.price}</p>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n                <h3>Total: {cartTotal}</h3>\r\n                <button onClick={() => {\r\n                    setMadePurchase(true);\r\n                    props.confirmPurchase();\r\n                }}>Confirm Purchase</button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;","import React, {useState, useEffect} from 'react'\r\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\r\nimport Navigation from './components/Navigation';\r\nimport AdBoard from './components/AdBoard';\r\nimport Account from './components/Account';\r\nimport PostAd from './components/PostAd';\r\nimport firebase from './components/firebase';\r\nimport FullAd from './components/FullAd';\r\nimport Cart from './components/Cart';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  // state variables\r\n  // all posted ads on database\r\n  const [ads,setAds] = useState([]);\r\n  // boolean check on whether user is logged in\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  // grab username of current user\r\n  const [currUser, setCurrUser] = useState(\"\");\r\n  // the ad that has been clicked on\r\n  const [selectedAd, setSelectedAd] = useState({});\r\n  // the cart of the currentUser\r\n  const [cart, setCart] = useState([]);\r\n  \r\n\r\n  // component did mount, add a listener to Firebase database and listen for changes on ads\r\n  useEffect(()=>{\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val().itemsForSale;\r\n      const updatedAds = [];\r\n      for(let key in data) {\r\n        updatedAds.push(data[key]);\r\n      };\r\n      setAds(updatedAds);\r\n    });\r\n  }, []);\r\n\r\n  //function to verify login\r\n  const logUserIn = (username, password) => {\r\n    const dbRef = firebase.database().ref().once('value', (snapshot) => {\r\n      // in the data go to the users key\r\n      const data = snapshot.val().users;\r\n      for (let key in data) {\r\n        if (username === data[key].username && password === data[key].password) {\r\n          setCurrUser(username);\r\n          setIsLoggedIn(true);\r\n          return true;\r\n        }\r\n        else {\r\n          console.log(\"fail\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to register new users with unique usernames\r\n  const registerUser = (username, password, e) => {\r\n    e.preventDefault();\r\n    let usernameTaken = false;\r\n    const dbRef = firebase.database().ref().once('value', (snapshot) => {\r\n      // in the data go to the users key\r\n      const data = snapshot.val().users;\r\n      for (let key in data) {\r\n        // since ther is no ignoreCase method in javaScript use upper instead \r\n        if (username.toUpperCase() === data[key].username.toUpperCase()) {\r\n          usernameTaken = true;\r\n          break;\r\n        }\r\n      }\r\n      if (usernameTaken === false) {\r\n        const dbRef2 = firebase.database().ref('users/');\r\n        dbRef2.push({\r\n          username: username,\r\n          password: password\r\n        });\r\n        setCurrUser(username);\r\n        setIsLoggedIn(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  // function that allows a user to post an ad\r\n  const postAd = (title, price, picture, description, e) => {\r\n    e.preventDefault();\r\n    let newAd = {};\r\n    const dbRef = firebase.database().ref().once('value', (snapshot) => {\r\n      const data = snapshot.val().itemsForSale;\r\n    \r\n    newAd = {\r\n      id: Object.keys(data).length + 1,\r\n      username: currUser,\r\n      title: title,\r\n      price: price,\r\n      picture: picture,\r\n      description: description\r\n    }\r\n    });\r\n    const itemsForSale = firebase.database().ref('itemsForSale/');\r\n    itemsForSale.push(newAd);\r\n  }\r\n\r\n  // function that is passed to the Ad component and returns the ad the user clicked on to\r\n  // display full information\r\n  const getSelectedAd = (adObject) => {\r\n    setSelectedAd(adObject);\r\n  }\r\n\r\n  const addToCart = (ad) => {\r\n    let newCart = cart;\r\n    newCart.push(ad);\r\n    setCart(newCart);\r\n  }\r\n\r\n  const confirmPurchase = () => {\r\n    setCart([]);\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Navigation/>\r\n        <Route exact path='/' render={() => <AdBoard getSelectedAd={getSelectedAd} ads={ads}/>}/>\r\n        <Route path=\"/account\" render={() => <Account getSelectedAd={getSelectedAd} isLoggedIn={isLoggedIn} logUserIn={logUserIn} registerUser={registerUser} ads={ads}\r\n          currUser={currUser}/>}/>\r\n        <Route path=\"/postAd\" render={() => <PostAd isLoggedIn={isLoggedIn} logUserIn={logUserIn} registerUser={registerUser} postAd={postAd}/>} />\r\n        <Route path=\"/fullAd/:id\" render={() => <FullAd addToCart={addToCart} selectedAd={selectedAd} />} />\r\n        <Route path=\"/cart/\" render={() => <Cart cart={cart} confirmPurchase={confirmPurchase} />} />\r\n      </div>\r\n    </Router>  \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}