{"version":3,"sources":["assets/noImageAvailable.jpg","components/Login.js","components/Ad.js","components/AdBoard.js","components/Account.js","components/Navigation.js","components/PostAd.js","components/firebase.js","components/FullAd.js","components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","useState","signInUsername","setSignInUsername","signInPassword","setSignInPassword","registerUsername","setRegisterUsername","registerPassword","setRegisterPassword","updateText","e","specificState","target","value","className","action","htmlFor","type","id","placeholder","onChange","onClick","logUserIn","registerUser","Ad","to","ad","getSelectedAd","picture","src","require","alt","title","price","AdBoard","ads","map","index","key","Account","myAds","filter","username","currUser","isLoggedIn","Navigation","setNumberOfItems","useEffect","cart","length","class","aria-label","PostAd","setTitle","setPrice","searchPic","setSearchPic","setPicture","description","setDescription","photoResults","setPhotoResults","required","preventDefault","axios","url","method","responseType","headers","Authorization","params","query","total_results","then","response","data","photos","searchPicture","photo","small","name","postAd","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FullAd","selectedAd","addToCart","download","Cart","cartTotal","setCartTotal","madePurchase","setMadePurchase","newTotal","reduce","accum","item","parseFloat","confirmPurchase","App","setAds","setIsLoggedIn","setCurrUser","setSelectedAd","setCart","database","ref","on","snapshot","val","itemsForSale","updatedAds","push","sort","a","b","password","once","users","console","log","usernameTaken","toUpperCase","newAd","Object","keys","document","getElementById","reset","adObject","newCart","printWindow","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3599dc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noImageAvailable.625d1aff.jpg\";","import React, {useState, useEffect} from 'react';\r\n\r\nconst Login = (props) => {\r\n\r\n    // set usernames and password to empty strings\r\n    const [signInUsername, setSignInUsername] = useState(\"\");\r\n    const [signInPassword, setSignInPassword] = useState(\"\");\r\n    const [registerUsername, setRegisterUsername] = useState(\"\");\r\n    const [registerPassword, setRegisterPassword] = useState(\"\");\r\n\r\n    const updateText = (e, specificState) => {\r\n        if (specificState === \"signInUsername\"){\r\n            setSignInUsername(e.target.value);\r\n        } else if (specificState === \"signInPassword\") {\r\n            setSignInPassword(e.target.value);\r\n        } else if (specificState === \"registerUsername\") {\r\n            setRegisterUsername(e.target.value);\r\n        } else if (specificState === \"registerPassword\") {\r\n            setRegisterPassword(e.target.value);\r\n        } else {}\r\n    }\r\n\r\n    return (\r\n        <ul className=\"loginContainer\">\r\n            <li className=\"flexParent flexColumn loginForm\">\r\n                <h2>Sign In</h2>\r\n                <form action=\"\" className=\"flexParent flexColumn\">\r\n                    <div className=\"inputLabel\">\r\n                        <label htmlFor=\"username\">Username</label>\r\n                        <input type=\"text\" id=\"username\" placeholder=\"Enter Username\"\r\n                        onChange={(e) => { updateText(e, \"signInUsername\") }} />\r\n                    </div>\r\n                    <div className=\"inputLabel\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"text\" id=\"password\" placeholder=\"Enter Password\"\r\n                        onChange={(e) => { updateText(e, \"signInPassword\") }} />\r\n                    </div>\r\n                </form>\r\n                    <button className=\"siteButton\" onClick={() => props.logUserIn(signInUsername, signInPassword)}>Sign In</button>\r\n            </li>\r\n            <li className=\"flexParent flexColumn registerForm\">\r\n                <h2>Register</h2>\r\n                <form action=\"\" className=\"flexParent flexColumn\">\r\n                    <div className=\"inputLabel\">\r\n                        <label htmlFor=\"newUsername\">Username</label>\r\n                        <input type=\"text\" id=\"newUsername\" placeholder=\"Enter Username\"\r\n                        onChange={(e) => { updateText(e, \"registerUsername\") }} />\r\n                    </div>\r\n                    <div className=\"inputLabel\">\r\n                        <label htmlFor=\"newPassword\">Password</label>\r\n                        <input type=\"text\" id=\"newPassword\" placeholder=\"Enter Password\"\r\n                        onChange={(e) => { updateText(e, \"registerPassword\") }} />\r\n                    </div>\r\n                    <button className=\"siteButton\" onClick={(e) => props.registerUser(registerUsername, registerPassword, e)}>Register</button>\r\n                </form>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nconst Ad = (props) => {\r\n    return (\r\n        <Link className=\"flexParent adListing\" to={`/fullAd/${props.ad.id}`} onClick={() => props.getSelectedAd(props.ad)}>\r\n            <div className=\"flexParent adPicContainer\">\r\n                {\r\n                    // if ther is no pic than put default no image available\r\n                    props.ad.picture === \"\" ?\r\n                    <img src={require(\"../assets/noImageAvailable.jpg\")} alt={props.ad.title} /> :\r\n                    <img src={props.ad.picture} alt={props.ad.title} />\r\n                }\r\n            </div>\r\n            <div className=\"adListingText\">\r\n                <h3>Title: {props.ad.title}</h3>\r\n                <p>Price: ${props.ad.price}</p>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Ad;","import React from 'react';\r\nimport Ad from './Ad';\r\n\r\nconst AdBoard = (props) => {\r\n    return (\r\n        <div className=\"flexParent flexColumn adBoard\">\r\n            <h2>{props.title}</h2>\r\n            {\r\n                props.ads.map((ad, index) => {\r\n                    return <Ad key={index} ad={ad} getSelectedAd={props.getSelectedAd}/>;\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdBoard;","import React from 'react';\r\nimport Login from './Login';\r\nimport AdBoard from './AdBoard';\r\n\r\nconst Account = (props) => {\r\n    let myAds = props.ads;\r\n    myAds = myAds.filter((ad) => { return ad.username === props.currUser });\r\n    return (\r\n        <div>\r\n            {/* IF LOGGEDIN where users can see their ads/acount info and edit them*/}\r\n            {/* IF NOT LOGGEDIN show sign up stuff*/}\r\n            {!props.isLoggedIn && <Login logUserIn={props.logUserIn} registerUser={props.registerUser}/>}\r\n            {props.isLoggedIn && <div>\r\n                    <AdBoard getSelectedAd={props.getSelectedAd} ads={myAds} title={\"Your Ads\"}/>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account;","import React, {useState, useEffect, Component} from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport Account from './Account';\r\n\r\nconst Navigation = (props) => {\r\n    // only work sif user clicks on a full view ad of one item and then a different item\r\n    const [numberOfItems, setNumberOfItems] = useState(0);\r\n    useEffect(() => {\r\n        setNumberOfItems(props.cart.length);\r\n    }, [props])\r\n    return (\r\n        <nav className=\"flexParent mainMenu\">\r\n            <Link to=\"/Studence\"><h1>Studence</h1></Link>\r\n            <Link className=\"postAdNav\" to=\"/postAd\">Post Ad</Link>\r\n            <Link className=\"account\" to=\"/account\">Account <i class=\"fas fa-user-circle\"></i></Link>\r\n            <Link className=\"cart\" to=\"/cart\">\r\n            <i aria-label=\"Click to view cart\" className=\"fas fa-shopping-cart shoppingCart\">\r\n                    {props.cart.length > 0 && <div className=\"flexParent numberOfItems\">\r\n                        {props.cart.length < 10 ?\r\n                            <p>{props.cart.length}</p> :\r\n                            <p>9+</p>}\r\n                    </div>}\r\n            </i>\r\n            </Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React, {useEffect, useState} from 'react';\r\nimport Login from './Login';\r\nimport axios from 'axios';\r\n\r\nconst PostAd = (props) => {\r\n    // set usernames and password to empty strings\r\n    const [title, setTitle] = useState(\"\");\r\n    const [price, setPrice] = useState(0);\r\n    const [searchPic, setSearchPic] = useState(\"\");\r\n    const [picture, setPicture] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [photoResults, setPhotoResults] = useState([]); \r\n\r\n    const updateText = (e, specificState) => {\r\n        if (specificState === \"title\") {\r\n            setTitle(e.target.value);\r\n        } else if (specificState === \"price\") {\r\n            setPrice(e.target.value);\r\n        } else if (specificState === \"searchPic\") {\r\n            setSearchPic(e.target.value);\r\n        } else if (specificState === \"description\") {\r\n            setDescription(e.target.value);\r\n        } else { }\r\n    }\r\n\r\n    const searchPicture = (e) => {\r\n        e.preventDefault();\r\n        axios({\r\n            url: 'https://api.pexels.com/v1/search',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            headers: {\r\n                Authorization: '563492ad6f917000010000016fbbfe29d1004ae7b7d31d9dab75aed7'\r\n            },\r\n            params: {\r\n                query: searchPic,\r\n                total_results: 10\r\n            }            \r\n        }).then((response) => {\r\n            setPhotoResults(response.data.photos);\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"adPostContainer\">\r\n            {!props.isLoggedIn && <Login logUserIn={props.logUserIn} registerUser={props.registerUser}/>}\r\n            {props.isLoggedIn && \r\n            <form action=\"\" id=\"adPost\" className=\"flexParent flexColumn\">\r\n                <div className=\"inputLabel\">\r\n                    <label htmlFor=\"title\">Title</label>\r\n                    <input required type=\"text\" id=\"title\" onChange={(e) => { updateText(e, \"title\") }} />\r\n                </div>\r\n                <div className=\"inputLabel\">\r\n                    <label htmlFor=\"price\">Price</label>\r\n                    <input required type=\"text\" id=\"price\" onChange={(e) => { updateText(e, \"price\") }} />\r\n                </div>\r\n                <div className=\"inputLabel\">\r\n                    <label htmlFor=\"searchPic\">Search for Picture</label>\r\n                    <input type=\"text\" id=\"searchPic\" onChange={(e) => { updateText(e, \"searchPic\") }} />\r\n                </div>\r\n                <button className=\"siteButton\" onClick={(e)=> {searchPicture(e)}}>Search Picture</button>\r\n                {picture === \"\" && <p>It is recommended you provide a picture!</p>}\r\n                <div className=\"picGallery flexParent flexWrap\">\r\n                    {photoResults.map((photo, id) => {\r\n                        return <button key={id} className=\"picChoice\" onClick={() => { setPicture(photo.src.small)}} >\r\n                                    <img src={photo.src.small} alt=\"\"/>\r\n                                </button>\r\n                    })\r\n                    }\r\n                </div>\r\n                <label htmlFor=\"description\">Description</label>\r\n                <textarea required name=\"description\" id=\"description\" id=\"description\" onChange={(e) => { updateText(e, \"description\") }} cols=\"30\" rows=\"10\"></textarea>\r\n                <button className=\"siteButton\" onClick={(e) => {\r\n                    props.postAd(title, price, picture, description, e);\r\n                    setPhotoResults([]);\r\n                }} >Upload Ad</button>\r\n            </form>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostAd;","import firebase from 'firebase/app';\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCmJo2qZ6oG27sE46q7bTwshnyUAEJwTdg\",\r\n    authDomain: \"studence-61105.firebaseapp.com\",\r\n    databaseURL: \"https://studence-61105.firebaseio.com\",\r\n    projectId: \"studence-61105\",\r\n    storageBucket: \"studence-61105.appspot.com\",\r\n    messagingSenderId: \"625737292006\",\r\n    appId: \"1:625737292006:web:8dbc42e7b45e9abcb5c327\"\r\n}\r\n\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nconst FullAd = (props) => {\r\n    const {selectedAd} = props;\r\n\r\n    return (\r\n        <ul className=\"flexParent flexColumn fullAdContainer\">\r\n            <li className=\"poster\" id=\"poster\">\r\n                <h2>{selectedAd.title}</h2>\r\n                <div className=\"posterImg\">\r\n                    {\r\n                        // if ther is no pic than put default no image available\r\n                        selectedAd.picture === \"\" ?\r\n                            <img src={require(\"../assets/noImageAvailable.jpg\")} alt={selectedAd.title} /> :\r\n                            <img src={selectedAd.picture} alt={selectedAd.title} />\r\n                    }\r\n                </div>\r\n                <p className=\"price\">${selectedAd.price}</p>\r\n                <p>{selectedAd.description}</p>\r\n                <p>Sold by: {selectedAd.username}</p>\r\n            </li>\r\n            <li>\r\n                <button className=\"siteButton\" onClick={() => props.addToCart(selectedAd)}>Add to Cart</button>\r\n                <Link className=\"siteButton buy\" to={`/cart`} onClick={() => props.addToCart(selectedAd)}>Buy</Link>\r\n            </li>\r\n            <li>\r\n                <button className=\"siteButton\" onClick={() => props.download()}>Download Poster</button>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default FullAd;","import React, {useState, useEffect} from 'react';\r\n\r\nconst Cart = (props) => {\r\n    const [cartTotal, setCartTotal] = useState(0);\r\n    const [madePurchase, setMadePurchase] = useState(false);\r\n    \r\n    useEffect( () => {\r\n        // update the shopping cart total\r\n        let newTotal = props.cart.reduce((accum, item) => {\r\n            return accum + parseFloat(item.price);\r\n        }, 0);\r\n        setCartTotal(newTotal);\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h2>CheckOut</h2>\r\n            {madePurchase && <p>Thank You!</p>}        \r\n            {props.cart.length === 0 && <p>No items in Cart!</p>}\r\n            {props.cart.length > 0 && <div>\r\n                <ul>\r\n                    {props.cart.map((item, index) => {\r\n                        return <li key={index}>\r\n                            <p>{item.title}</p>\r\n                            <p>{item.price}</p>\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n                <h3>Total: {cartTotal}</h3>\r\n                <button onClick={() => {\r\n                    setMadePurchase(true);\r\n                    props.confirmPurchase();\r\n                }}>Confirm Purchase</button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;","import React, {useState, useEffect} from 'react'\r\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\r\nimport Navigation from './components/Navigation';\r\nimport AdBoard from './components/AdBoard';\r\nimport Account from './components/Account';\r\nimport PostAd from './components/PostAd';\r\nimport firebase from './components/firebase';\r\nimport FullAd from './components/FullAd';\r\nimport Cart from './components/Cart';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  // state variables\r\n  // all posted ads on database\r\n  const [ads,setAds] = useState([]);\r\n  // boolean check on whether user is logged in\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  // grab username of current user\r\n  const [currUser, setCurrUser] = useState(\"\");\r\n  // the ad that has been clicked on\r\n  const [selectedAd, setSelectedAd] = useState({});\r\n  // the cart of the currentUser\r\n  const [cart, setCart] = useState([]);\r\n  \r\n\r\n  // component did mount, add a listener to Firebase database and listen for changes on ads\r\n  useEffect(()=>{\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val().itemsForSale;\r\n      const updatedAds = [];\r\n      for(let key in data) {\r\n        updatedAds.push(data[key]);\r\n      };\r\n      // sort by latest posted ad\r\n      updatedAds.sort((a, b) => b.id - a.id);\r\n      \r\n      setAds(updatedAds);\r\n    });\r\n  }, []);\r\n\r\n  //function to verify login\r\n  const logUserIn = (username, password) => {\r\n    const dbRef = firebase.database().ref().once('value', (snapshot) => {\r\n      // in the data go to the users key\r\n      const data = snapshot.val().users;\r\n      for (let key in data) {\r\n        if (username === data[key].username && password === data[key].password) {\r\n          setCurrUser(username);\r\n          setIsLoggedIn(true);\r\n          return true;\r\n        }\r\n        else {\r\n          console.log(\"fail\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // function to register new users with unique usernames\r\n  const registerUser = (username, password, e) => {\r\n    e.preventDefault();\r\n    let usernameTaken = false;\r\n    const dbRef = firebase.database().ref().once('value', (snapshot) => {\r\n      // in the data go to the users key\r\n      const data = snapshot.val().users;\r\n      for (let key in data) {\r\n        // since ther is no ignoreCase method in javaScript use upper instead \r\n        if (username.toUpperCase() === data[key].username.toUpperCase()) {\r\n          usernameTaken = true;\r\n          break;\r\n        }\r\n      }\r\n      if (usernameTaken === false) {\r\n        const dbRef2 = firebase.database().ref('users/');\r\n        dbRef2.push({\r\n          username: username,\r\n          password: password\r\n        });\r\n        setCurrUser(username);\r\n        setIsLoggedIn(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  // function that allows a user to post an ad\r\n  const postAd = (title, price, picture, description, e) => {\r\n    e.preventDefault();\r\n    let newAd = {};\r\n    const dbRef = firebase.database().ref().once('value', (snapshot) => {\r\n    const data = snapshot.val().itemsForSale;\r\n    newAd = {\r\n      id: Object.keys(data).length + 1,\r\n      username: currUser,\r\n      title: title,\r\n      price: price,\r\n      picture: picture,\r\n      description: description\r\n    }\r\n    });\r\n    const itemsForSale = firebase.database().ref('itemsForSale/');\r\n    itemsForSale.push(newAd);\r\n    document.getElementById(\"adPost\").reset();\r\n  }\r\n\r\n  // function that is passed to the Ad component and returns the ad the user clicked on to\r\n  // display full information\r\n  const getSelectedAd = (adObject) => {\r\n    setSelectedAd(adObject);\r\n  }\r\n\r\n  const addToCart = (ad) => {\r\n    let newCart = cart;\r\n    newCart.push(ad);\r\n    setCart(newCart);\r\n  }\r\n\r\n  const confirmPurchase = () => {\r\n    setCart([]);\r\n  }\r\n\r\n  const download = () => {\r\n    this.printWindow();\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App wrapper\">\r\n        <Navigation cart={cart}/>\r\n        <Route path='/Studence' render={() => <AdBoard getSelectedAd={getSelectedAd} title={\"Listings\"} ads={ads}/>}/>\r\n        <Route path=\"/account\" render={() => <Account getSelectedAd={getSelectedAd} isLoggedIn={isLoggedIn} logUserIn={logUserIn} registerUser={registerUser} ads={ads}\r\n          currUser={currUser}/>}/>\r\n        <Route path=\"/postAd\" render={() => <PostAd isLoggedIn={isLoggedIn} logUserIn={logUserIn} registerUser={registerUser} postAd={postAd}/>} />\r\n        <Route path=\"/fullAd/:id\" render={() => <FullAd download={download} addToCart={addToCart} selectedAd={selectedAd} />} />\r\n        <Route path=\"/cart/\" render={() => <Cart cart={cart} confirmPurchase={confirmPurchase} />} />\r\n      </div>\r\n    </Router>  \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}